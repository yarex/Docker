-----
> docker version
> docker info

> docker
-----
-----
> docker container run --publish 80:80 nginx
> docker container run --publish 80:80 --detach nginx
> docker container ls
> docker container stop 690
> docker container ls
> docker container ls -a

> docker container run --publish 80:80 --detach --name webhost nginx
> docker container logs webhost
> docker container top webhost

> docker container --help

> docker container ls -a
> docker container rm 63f 690 0de
> docker container rm -f 63f 
-----
-----
> docker run --name mongo -d mongo
> docker ps
> docker top mongo
> ps aux
> docker stop mongo
> ps aux | grep mongo
-----
-----
docs.docker.com

--detach (-d)
--env (-e)

docker ps = docker container ls

Docker Toolbox: localhost -> 192.168.99.100

-----
-----
> docker container run -p 80:80 -d --name proxy nginx
> docker container run -p 8080:80 -d --name webserver httpd
> docker container run -p 3306:3306 -d --name db -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql
> docker container logs  //mee0Bae8aeghae1eiH6ookoof4yie9ai
> docker container stop proxy webserver db
> docker container rm proxy webserver db
> docker container ls -a
> docker image ls

> curl localhost
> curl localhost:8080
-----
-----
> docker container run -d --name nginx nginx
> docker container run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=true mysql
> docker container ls

> docker container top mysql
> docker container top nginx

> docker container inspect mysql
> docker container inspect nginx

> docker container stats mysql
> docker container stats nginx
> docker container stats
-----
-----
> docker container run -it --name proxy nginx bash
>> ls -al
>> exit 

> docker container run -it --name ubuntu ubuntu
>> apt-get update
>> apt-get install -y curl
>> curl google.com
>> exit

> docker container start -ai ubuntu

> docker container exec --help 
> docker container exec -it mysql bash
>> apt-get update && apt-get install -y procps
>> ps aux
>> exit

> docker pull alpine
> docker container run -it alpine bash //ERROR
> docker container run -it alpine sh
>> apk
>> exit
-----
-----
> docker container run -p 80:80 --name webhost -d nginx
> docker container port webhost
> docker container inspect --format '{{ .NetworkSettings.IPAddress }}' webhost
> ifconfig en0
-----
-----
nginx -> nginx:alpine
-----
-----
> docker network ls
> docker network inspect bridge

> docker network create my_app_net
> docker network ls
> docker network create --help

> docker container run -d --name new_nginx --network my_app_net nginx
> docker network inspect my_app_net

> docker network --help
> docker network connect my_app_net webhost
> docker container inspect webhost
> docker network disconnect my_app_net webhost
> docker container inspect webhost
-----
-----
> docker container ls
> docker network inspect my_app_net 

> docker container run -d --name my_nginx --network my_app_net nginx
> docker network inspect my_app_net 

> docker container exec -it my_nginx ping new_nginx
> docker container exec -it new_nginx ping my_nginx
-----
-----
> docker container run -it --rm centos:7 bash
>> curl --version //7.29.0
>> yum update curl
>> curl --version //7.29.0

> docker container run -it --rm ubuntu:14.04 bash
>> curl --version //command not found
>> apt-get update && apt-get install -y curl
>> curl --version //7.35.0
-----
-----
> docker network create test
> docker container run -d --name es01 --net test --network-alias search elasticsearch:2
> docker container run -d --name es02 --net test --network-alias search elasticsearch:2
> docker container run -it --rm --net test alpine nslookup search
> docker container run -it --rm --net test centos curl -s search:9200

> docker network create dude
> docker container run -d --net dude --net-alias search elasticsearch:2
> docker container run -d --net dude --net-alias search elasticsearch:2
> docker container run --rm --net dude alpine nslookup search
> docker container run --rm --net dude centos curl -s search:9200
-----
-----
